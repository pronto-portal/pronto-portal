### This file was generated by Nexus Schema
### Do not make changes to this file directly

input AddAndCreateTranslatorInput {
    city: String
    email: String!
    firstName: String!
    languages: [String!]
    lastName: String
    phone: String!
    state: String
}

input AddNonUserTranslatorInput {
    city: String
    email: String!
    firstName: String!
    languages: [String!]
    lastName: String!
    phone: String
    state: String
}

input AddTranslatorInput {
    email: String!
}

type Address {
    address1: String
    address2: String
    assignment: [Assignment]
    city: String
    id: String
    state: String
    user: User
    userId: String
    zipCode: String
}

input AddressesFilter {
    address1: String
    address2: String
    city: String
    state: String
    zipCode: String
}

type Assignment {
    address: Address
    assignedTo: Translator
    assignedToUser: Translator
    claimant: Claimant
    claimantNoShow: Boolean
    createdAt: DateTime
    createdBy: User
    dateTime: DateTime
    id: String
    isCancelled: Boolean
    isComplete: Boolean
    translatorNoShow: Boolean
}

input AssignmentsFilter {
    address: AddressesFilter
    assignedTo: TranslatorsFilter
    claimant: ClaimantsFilter
    date: DateTime
    dateRange: DateRange
    isCancelled: Boolean
}

input ByEmailInput {
    email: String!
}

input ByIdInput {
    id: String!
}

type Claimant {
    assignment: [Assignment]
    email: String
    firstName: String
    id: String
    languages: [String]
    lastName: String
    phone: String
    primaryLanguage: String
    user: User
    userId: String
}

input ClaimantsFilter {
    firstName: String
    language: String
    lastName: String
    primaryLanguage: String
}

input CompleteProfileInput {
    city: String!
    firstName: String!
    isManager: Boolean!
    isTranslator: Boolean!
    languages: [String!]
    lastName: String!
    phone: String!
    state: String!
}

input CreateAddressInput {
    address1: String!
    address2: String
    city: String!
    state: String!
    zipCode: String!
}

input CreateAssignmentInput {
    addressId: String!
    claimantId: String!
    dateTime: DateTime!
    translatorId: String!
}

input CreateClaimantInput {
    email: String
    firstName: String!
    languages: [String!]
    lastName: String!
    phone: String!
    primaryLanguage: String!
}

input CreateReminderInput {
    assignmentId: String!
    claimantMessage: String
    translatorMessage: String
}

input CreateRoleInput {
    name: String!
    priceCents: Int!
}

input CreateUserInput {
    email: String!
    firstName: String
    lastName: String
    phone: String
    profilePic: String
}

input DateRange {
    date1: DateTime!
    date2: DateTime!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DeleteRoleInput {
    name: String!
}

input DisconnectTranslatorInput {
    email: String!
}

type GetAddressesResponse {
    addresses: [Address!]!
    totalRowCount: Int!
}

type GetAssignmentsResponse {
    assignments: [Assignment!]!
    totalRowCount: Int!
}

type GetClaimantsResponse {
    claimants: [Claimant!]!
    totalRowCount: Int!
}

type GetNonUserTranslatorsResponse {
    totalRowCount: Int!
    translators: [Translator!]!
}

type GetRemindersResponse {
    reminders: [Reminder!]!
    totalRowCount: Int!
}

type GetTranslatorsResponse {
    totalRowCount: Int!
    translators: [User!]!
}

type Language {
    code: String
    name: String
}

type Mutation {
    addAndCreateTranslator(input: AddAndCreateTranslatorInput!): User
    addNonUserTranslator(input: AddNonUserTranslatorInput!): Translator
    addTranslator(input: AddTranslatorInput!): User
    completeProfile(input: CompleteProfileInput!): User
    createAddress(input: CreateAddressInput!): Address!
    createAssignment(input: CreateAssignmentInput!): Assignment!
    createClaimant(input: CreateClaimantInput!): Claimant!
    createReminder(input: CreateReminderInput!): Reminder!
    deleteAddress(input: ByIdInput!): Address!
    deleteAssignment(input: ByIdInput!): Assignment!
    deleteClaimant(input: ByIdInput!): Claimant!
    deleteNonUserTranslator(input: ByIdInput!): Translator
    deleteReminder(input: ByIdInput!): Reminder!
    disconnectTranslator(input: DisconnectTranslatorInput!): User
    toggleAssignmentCancellation(input: ByIdInput!): Assignment
    updateAddress(input: UpdateAddressInput!): Address!
    updateAssignment(input: UpdateAssignmentInput!): Assignment!
    updateClaimant(input: UpdateClaimantInput!): Claimant!
    updateNonUserTranslator(input: UpdateNonUserTranslatorInput!): Translator
    updateReminder(input: UpdateReminderInput!): Reminder!
    updateUser(input: UpdateUserInput!): User
}

input PaginatedInput {
    countPerPage: Int!
    page: Int!
}

type Query {
    getAddress(input: ByIdInput!): Address!
    getAddresses(input: PaginatedInput, where: AddressesFilter): GetAddressesResponse!
    getAssignment(input: ByIdInput!): Assignment!
    getAssignments(input: PaginatedInput, where: AssignmentsFilter): GetAssignmentsResponse!
    getClaimant(input: ByIdInput!): Claimant!
    getClaimants(input: PaginatedInput, where: ClaimantsFilter): GetClaimantsResponse!
    getLanguages: [Language]
    getNonUserTranslator(input: ByIdInput!): Translator!
    getNonUserTranslators(input: PaginatedInput, where: TranslatorsFilter): GetNonUserTranslatorsResponse!
    getReminder(input: ByIdInput!): Reminder!
    getReminders(input: PaginatedInput!, where: RemindersFilter): GetRemindersResponse!
    getRole(input: ByIdInput!): Role
    getRoles: [Role]
    getTranslator(input: ByIdInput!): User!
    getTranslators(input: PaginatedInput, where: TranslatorsFilter): GetTranslatorsResponse!
    getUser: User!
}

type Reminder {
    assignment: Assignment
    assignmentId: String
    claimantMessage: String
    createdBy: User
    createdById: String
    id: String
    translatorMessage: String
}

input RemindersFilter {
    date: String
    range: DateRange
}

type Role {
    description: String
    features: [String!]
    name: String
    priceCents: Int
    remindersLimit: Int
    stripePriceId: String
    translatorsLimit: Int
    users: [User]
}

type Translator {
    assignedTo: [Assignment]
    city: String
    createdAt: DateTime
    email: String
    firstName: String
    id: String
    languages: [String!]
    lastName: String
    phone: String
    state: String
    updatedAt: DateTime
}

input TranslatorsFilter {
    city: String
    email: String
    firstName: String
    id: String
    languages: [String!]
    lastName: String
    phone: String
    state: String
}

input UpdateAddressInput {
    address1: String
    address2: String
    city: String
    id: String!
    state: String
    zipCode: String
}

input UpdateAssignmentInput {
    address: UpdateAddressInput
    addressId: String
    claimantId: String
    claimantNoShow: Boolean
    dateTime: DateTime
    id: String!
    isComplete: Boolean
    translatorId: String
    translatorNoShow: Boolean
}

input UpdateClaimantInput {
    email: String
    firstName: String
    id: String!
    languages: [String!]
    lastName: String
    phone: String
    primaryLanguage: String
}

input UpdateNonUserTranslatorInput {
    city: String
    email: String
    firstName: String
    id: String!
    languages: [String!]
    lastName: String
    phone: String
    state: String
}

input UpdateReminderInput {
    claimantMessage: String
    id: String!
    translatorMessage: String
}

input UpdateRoleInput {
    description: String
    name: String
    priceCents: Int
}

input UpdateUserInput {
    city: String
    email: String
    firstName: String
    id: String!
    isManager: Boolean
    isProfileComplete: Boolean
    isTranslator: Boolean
    languages: [String!]
    lastName: String
    phone: String
    profilePic: String = ""
    state: String
}

type User {
    assignedTo: [Assignment]
    assignments: [Assignment]
    autoRenewSubscription: Boolean
    city: String
    createdAt: DateTime
    email: String!
    firstName: String
    id: String!
    isBanned: Boolean
    isManager: Boolean
    isProfileComplete: Boolean
    isTranslator: Boolean
    languages: [String]
    lastName: String
    nonUserTranslators: [Translator]
    phone: String
    profilePic: String
    remindersCount: Int
    remindersCreatedThisMonth: Int
    role: Role
    state: String
    subscriptionEndDate: DateTime
    translatingFor: [User]
    translators: [Translator]
    translatorsCount: Int
    updatedAt: DateTime
}
